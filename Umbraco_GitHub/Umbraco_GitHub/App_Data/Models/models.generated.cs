//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.8.100
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "ee0006ce93384755")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.5")]

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Home</summary>
	[PublishedContentModel("home")]
	public partial class Home : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}
	}

	/// <summary>Components</summary>
	[PublishedContentModel("components")]
	public partial class Components : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "components";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Components(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Components, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// IsComponent: Marks this item as a component (so it isn't shown in navigation or search or atoz)
		///</summary>
		[ImplementPropertyType("isComponent")]
		public string IsComponent
		{
			get { return this.GetPropertyValue<string>("isComponent"); }
		}
	}

	/// <summary>Configuration</summary>
	[PublishedContentModel("configuration")]
	public partial class Configuration : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "configuration";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Configuration(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Configuration, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// isComponent
		///</summary>
		[ImplementPropertyType("isComponent")]
		public string IsComponent
		{
			get { return this.GetPropertyValue<string>("isComponent"); }
		}
	}

	// Mixin content Type 1106 with alias "contactDetails"
	/// <summary>Contact Details</summary>
	public partial interface IContactDetails : IPublishedContent
	{
		/// <summary>Address</summary>
		string Address { get; }

		/// <summary>Email Address</summary>
		string EmailAddress { get; }

		/// <summary>Telephone Number</summary>
		string TelephoneNumber { get; }
	}

	/// <summary>Contact Details</summary>
	[PublishedContentModel("contactDetails")]
	public partial class ContactDetails : PublishedContentModel, IContactDetails
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactDetails";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactDetails(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactDetails, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Address
		///</summary>
		[ImplementPropertyType("address")]
		public string Address
		{
			get { return GetAddress(this); }
		}

		/// <summary>Static getter for Address</summary>
		public static string GetAddress(IContactDetails that) { return that.GetPropertyValue<string>("address"); }

		///<summary>
		/// Email Address: Email Address for Contact
		///</summary>
		[ImplementPropertyType("emailAddress")]
		public string EmailAddress
		{
			get { return GetEmailAddress(this); }
		}

		/// <summary>Static getter for Email Address</summary>
		public static string GetEmailAddress(IContactDetails that) { return that.GetPropertyValue<string>("emailAddress"); }

		///<summary>
		/// Telephone Number
		///</summary>
		[ImplementPropertyType("telephoneNumber")]
		public string TelephoneNumber
		{
			get { return GetTelephoneNumber(this); }
		}

		/// <summary>Static getter for Telephone Number</summary>
		public static string GetTelephoneNumber(IContactDetails that) { return that.GetPropertyValue<string>("telephoneNumber"); }
	}

	// Mixin content Type 1107 with alias "contactLink"
	/// <summary>Contact Link</summary>
	public partial interface IContactLink : IPublishedContent
	{
		/// <summary>Contact Details</summary>
		IPublishedContent ContactDetails { get; }
	}

	/// <summary>Contact Link</summary>
	[PublishedContentModel("contactLink")]
	public partial class ContactLink : PublishedContentModel, IContactLink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactLink";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactLink(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactLink, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contact Details
		///</summary>
		[ImplementPropertyType("contactDetails")]
		public IPublishedContent ContactDetails
		{
			get { return GetContactDetails(this); }
		}

		/// <summary>Static getter for Contact Details</summary>
		public static IPublishedContent GetContactDetails(IContactLink that) { return that.GetPropertyValue<IPublishedContent>("contactDetails"); }
	}

	// Mixin content Type 1108 with alias "componentContentFull"
	/// <summary>Content - Grid</summary>
	public partial interface IComponentContentFull : IPublishedContent
	{
		/// <summary>Content</summary>
		Newtonsoft.Json.Linq.JToken Content { get; }

		/// <summary>Title</summary>
		object Title { get; }
	}

	/// <summary>Content - Grid</summary>
	[PublishedContentModel("componentContentFull")]
	public partial class ComponentContentFull : PublishedContentModel, IComponentContentFull
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "componentContentFull";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ComponentContentFull(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ComponentContentFull, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return GetContent(this); }
		}

		/// <summary>Static getter for Content</summary>
		public static Newtonsoft.Json.Linq.JToken GetContent(IComponentContentFull that) { return that.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return GetTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static object GetTitle(IComponentContentFull that) { return that.GetPropertyValue("title"); }
	}

	// Mixin content Type 1109 with alias "contentSmall"
	/// <summary>Content - RTE</summary>
	public partial interface IContentSmall : IPublishedContent
	{
		/// <summary>Content</summary>
		IHtmlString BodyText { get; }

		/// <summary>Title</summary>
		object Title { get; }
	}

	/// <summary>Content - RTE</summary>
	[PublishedContentModel("contentSmall")]
	public partial class ContentSmall : PublishedContentModel, IContentSmall
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentSmall";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentSmall(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentSmall, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return GetBodyText(this); }
		}

		/// <summary>Static getter for Content</summary>
		public static IHtmlString GetBodyText(IContentSmall that) { return that.GetPropertyValue<IHtmlString>("bodyText"); }

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return GetTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static object GetTitle(IContentSmall that) { return that.GetPropertyValue("title"); }
	}

	// Mixin content Type 1110 with alias "datedContent"
	/// <summary>Dated Content</summary>
	public partial interface IDatedContent : IPublishedContent
	{
		/// <summary>End Date</summary>
		DateTime EndDate { get; }

		/// <summary>Start Date</summary>
		DateTime StartDate { get; }
	}

	/// <summary>Dated Content</summary>
	[PublishedContentModel("datedContent")]
	public partial class DatedContent : PublishedContentModel, IDatedContent
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "datedContent";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public DatedContent(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DatedContent, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// End Date: Date at which it ends
		///</summary>
		[ImplementPropertyType("endDate")]
		public DateTime EndDate
		{
			get { return GetEndDate(this); }
		}

		/// <summary>Static getter for End Date</summary>
		public static DateTime GetEndDate(IDatedContent that) { return that.GetPropertyValue<DateTime>("endDate"); }

		///<summary>
		/// Start Date: Date at which it starts
		///</summary>
		[ImplementPropertyType("startDate")]
		public DateTime StartDate
		{
			get { return GetStartDate(this); }
		}

		/// <summary>Static getter for Start Date</summary>
		public static DateTime GetStartDate(IDatedContent that) { return that.GetPropertyValue<DateTime>("startDate"); }
	}

	/// <summary>Global Settings</summary>
	[PublishedContentModel("globalSettings")]
	public partial class GlobalSettings : Configuration
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "globalSettings";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public GlobalSettings(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<GlobalSettings, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// fromAddress: Email address - forms and the like can use when sending emails
		///</summary>
		[ImplementPropertyType("fromAddress")]
		public string FromAddress
		{
			get { return this.GetPropertyValue<string>("fromAddress"); }
		}
	}

	// Mixin content Type 1112 with alias "leadImage"
	/// <summary>Lead Image</summary>
	public partial interface ILeadImage : IPublishedContent
	{
		/// <summary>image</summary>
		Umbraco.Web.Models.ImageCropDataSet Image { get; }
	}

	/// <summary>Lead Image</summary>
	[PublishedContentModel("leadImage")]
	public partial class LeadImage : PublishedContentModel, ILeadImage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "leadImage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LeadImage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LeadImage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// image: Lead Image for the page,
		///</summary>
		[ImplementPropertyType("image")]
		public Umbraco.Web.Models.ImageCropDataSet Image
		{
			get { return GetImage(this); }
		}

		/// <summary>Static getter for image</summary>
		public static Umbraco.Web.Models.ImageCropDataSet GetImage(ILeadImage that) { return that.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("image"); }
	}

	// Mixin content Type 1113 with alias "locationInfo"
	/// <summary>Location Info</summary>
	public partial interface ILocationInfo : IPublishedContent
	{
		/// <summary>Location</summary>
		AngularGoogleMaps.Model Location { get; }
	}

	/// <summary>Location Info</summary>
	[PublishedContentModel("locationInfo")]
	public partial class LocationInfo : PublishedContentModel, ILocationInfo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "locationInfo";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LocationInfo(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LocationInfo, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Location
		///</summary>
		[ImplementPropertyType("location")]
		public AngularGoogleMaps.Model Location
		{
			get { return GetLocation(this); }
		}

		/// <summary>Static getter for Location</summary>
		public static AngularGoogleMaps.Model GetLocation(ILocationInfo that) { return that.GetPropertyValue<AngularGoogleMaps.Model>("location"); }
	}

	/// <summary>Opening Times</summary>
	[PublishedContentModel("openingTimes")]
	public partial class OpeningTimes : Components
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "openingTimes";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public OpeningTimes(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<OpeningTimes, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * The class OpeningTimes cannot implement this property,
		 * because CSharp does not support naming the property
		 * with alias "openingTimes" with the same name as content
		 * type with alias "openingTimes". Consider using an attribute
		 * to assign a different name to the property.
		 *

		///<summary>
		/// Opening Times
		///</summary>
		[ImplementPropertyType("openingTimes")]
		public object OpeningTimes
		{
			get { return this.GetPropertyValue("openingTimes"); }
		}

		 *
		 */
	}

	/// <summary>Pages</summary>
	[PublishedContentModel("pages")]
	public partial class Pages : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pages";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Pages(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Pages, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// ESD Service Id: ID For this service as defined in ESD Service List
		///</summary>
		[ImplementPropertyType("esdServiceId")]
		public string EsdServiceId
		{
			get { return this.GetPropertyValue<string>("esdServiceId"); }
		}

		///<summary>
		/// Service Alerts: Select an alert to appear across the top of this page
		///</summary>
		[ImplementPropertyType("serviceAlerts")]
		public IEnumerable<IPublishedContent> ServiceAlerts
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("serviceAlerts"); }
		}

		///<summary>
		/// Summary: Displayed on pages that list this page, such as gateway pages
		///</summary>
		[ImplementPropertyType("summary")]
		public string Summary
		{
			get { return this.GetPropertyValue<string>("summary"); }
		}

		///<summary>
		/// Hide From Navigation: Hides page from Navigation elements
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Event</summary>
	[PublishedContentModel("event")]
	public partial class Event : Pages, IComponentContentFull, IContactLink, IDatedContent, ILeadImage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "event";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Event(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Event, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}

		///<summary>
		/// Contact Details
		///</summary>
		[ImplementPropertyType("contactDetails")]
		public IPublishedContent ContactDetails
		{
			get { return Umbraco.Web.PublishedContentModels.ContactLink.GetContactDetails(this); }
		}

		///<summary>
		/// End Date: Date at which it ends
		///</summary>
		[ImplementPropertyType("endDate")]
		public DateTime EndDate
		{
			get { return Umbraco.Web.PublishedContentModels.DatedContent.GetEndDate(this); }
		}

		///<summary>
		/// Start Date: Date at which it starts
		///</summary>
		[ImplementPropertyType("startDate")]
		public DateTime StartDate
		{
			get { return Umbraco.Web.PublishedContentModels.DatedContent.GetStartDate(this); }
		}

		///<summary>
		/// image: Lead Image for the page,
		///</summary>
		[ImplementPropertyType("image")]
		public Umbraco.Web.Models.ImageCropDataSet Image
		{
			get { return Umbraco.Web.PublishedContentModels.LeadImage.GetImage(this); }
		}
	}

	/// <summary>Gateway Page</summary>
	[PublishedContentModel("gatewayPage")]
	public partial class GatewayPage : Pages, IComponentContentFull
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "gatewayPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public GatewayPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<GatewayPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Main Item Count: Number of items shown in main block (default 6)
		///</summary>
		[ImplementPropertyType("mainItemCount")]
		public int MainItemCount
		{
			get { return this.GetPropertyValue<int>("mainItemCount"); }
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}
	}

	/// <summary>News Item</summary>
	[PublishedContentModel("newsItem")]
	public partial class NewsItem : Pages, IComponentContentFull, IDatedContent, ILeadImage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "newsItem";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NewsItem(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NewsItem, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}

		///<summary>
		/// End Date: Date at which it ends
		///</summary>
		[ImplementPropertyType("endDate")]
		public DateTime EndDate
		{
			get { return Umbraco.Web.PublishedContentModels.DatedContent.GetEndDate(this); }
		}

		///<summary>
		/// Start Date: Date at which it starts
		///</summary>
		[ImplementPropertyType("startDate")]
		public DateTime StartDate
		{
			get { return Umbraco.Web.PublishedContentModels.DatedContent.GetStartDate(this); }
		}

		///<summary>
		/// image: Lead Image for the page,
		///</summary>
		[ImplementPropertyType("image")]
		public Umbraco.Web.Models.ImageCropDataSet Image
		{
			get { return Umbraco.Web.PublishedContentModels.LeadImage.GetImage(this); }
		}
	}

	/// <summary>Redirect</summary>
	[PublishedContentModel("redirect")]
	public partial class Redirect : Pages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "redirect";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Redirect(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Redirect, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// External Redirect
		///</summary>
		[ImplementPropertyType("externalRedirect")]
		public string ExternalRedirect
		{
			get { return this.GetPropertyValue<string>("externalRedirect"); }
		}

		///<summary>
		/// Internal Redirect
		///</summary>
		[ImplementPropertyType("internalRedirect")]
		public IPublishedContent InternalRedirect
		{
			get { return this.GetPropertyValue<IPublishedContent>("internalRedirect"); }
		}

		///<summary>
		/// Title: Name for the redirect
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return this.GetPropertyValue("title"); }
		}
	}

	// Mixin content Type 1120 with alias "relatedItems"
	/// <summary>Related Items</summary>
	public partial interface IRelatedItems : IPublishedContent
	{
		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * The class RelatedItems cannot implement this property,
		 * because CSharp does not support naming the property
		 * with alias "relatedItems" with the same name as content
		 * type with alias "relatedItems". Consider using an attribute
		 * to assign a different name to the property.
		 *

		/// <summary>Related Items</summary>
		Umbraco.Web.Models.RelatedLinks RelatedItems { get; }

		 *
		 */
	}

	/// <summary>Related Items</summary>
	[PublishedContentModel("relatedItems")]
	public partial class RelatedItems : PublishedContentModel, IRelatedItems
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "relatedItems";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public RelatedItems(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<RelatedItems, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * The class RelatedItems cannot implement this property,
		 * because CSharp does not support naming the property
		 * with alias "relatedItems" with the same name as content
		 * type with alias "relatedItems". Consider using an attribute
		 * to assign a different name to the property.
		 *

		///<summary>
		/// Related Items
		///</summary>
		[ImplementPropertyType("relatedItems")]
		public Umbraco.Web.Models.RelatedLinks RelatedItems
		{
			get { return GetRelatedItems(this); }
		}

		 *
		 */

		/// <summary>Static getter for Related Items</summary>
		public static Umbraco.Web.Models.RelatedLinks GetRelatedItems(IRelatedItems that) { return that.GetPropertyValue<Umbraco.Web.Models.RelatedLinks>("relatedItems"); }
	}

	/// <summary>Contact Page</summary>
	[PublishedContentModel("contactPage")]
	public partial class ContactPage : Pages, IComponentContentFull, IContactDetails, IRelatedItems
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}

		///<summary>
		/// Address
		///</summary>
		[ImplementPropertyType("address")]
		public string Address
		{
			get { return Umbraco.Web.PublishedContentModels.ContactDetails.GetAddress(this); }
		}

		///<summary>
		/// Email Address: Email Address for Contact
		///</summary>
		[ImplementPropertyType("emailAddress")]
		public string EmailAddress
		{
			get { return Umbraco.Web.PublishedContentModels.ContactDetails.GetEmailAddress(this); }
		}

		///<summary>
		/// Telephone Number
		///</summary>
		[ImplementPropertyType("telephoneNumber")]
		public string TelephoneNumber
		{
			get { return Umbraco.Web.PublishedContentModels.ContactDetails.GetTelephoneNumber(this); }
		}

		///<summary>
		/// Related Items
		///</summary>
		[ImplementPropertyType("relatedItems")]
		public Umbraco.Web.Models.RelatedLinks RelatedItems
		{
			get { return Umbraco.Web.PublishedContentModels.RelatedItems.GetRelatedItems(this); }
		}
	}

	/// <summary>Content Page</summary>
	[PublishedContentModel("contentPage")]
	public partial class ContentPage : Pages, IComponentContentFull, IContactLink, IRelatedItems
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}

		///<summary>
		/// Contact Details
		///</summary>
		[ImplementPropertyType("contactDetails")]
		public IPublishedContent ContactDetails
		{
			get { return Umbraco.Web.PublishedContentModels.ContactLink.GetContactDetails(this); }
		}

		///<summary>
		/// Related Items
		///</summary>
		[ImplementPropertyType("relatedItems")]
		public Umbraco.Web.Models.RelatedLinks RelatedItems
		{
			get { return Umbraco.Web.PublishedContentModels.RelatedItems.GetRelatedItems(this); }
		}
	}

	/// <summary>Listing Page</summary>
	[PublishedContentModel("listingPage")]
	public partial class ListingPage : Pages, IComponentContentFull, IContactDetails, IRelatedItems
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "listingPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ListingPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ListingPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}

		///<summary>
		/// Address
		///</summary>
		[ImplementPropertyType("address")]
		public string Address
		{
			get { return Umbraco.Web.PublishedContentModels.ContactDetails.GetAddress(this); }
		}

		///<summary>
		/// Email Address: Email Address for Contact
		///</summary>
		[ImplementPropertyType("emailAddress")]
		public string EmailAddress
		{
			get { return Umbraco.Web.PublishedContentModels.ContactDetails.GetEmailAddress(this); }
		}

		///<summary>
		/// Telephone Number
		///</summary>
		[ImplementPropertyType("telephoneNumber")]
		public string TelephoneNumber
		{
			get { return Umbraco.Web.PublishedContentModels.ContactDetails.GetTelephoneNumber(this); }
		}

		///<summary>
		/// Related Items
		///</summary>
		[ImplementPropertyType("relatedItems")]
		public Umbraco.Web.Models.RelatedLinks RelatedItems
		{
			get { return Umbraco.Web.PublishedContentModels.RelatedItems.GetRelatedItems(this); }
		}
	}

	/// <summary>Section Homepage</summary>
	[PublishedContentModel("sectionHomepage")]
	public partial class SectionHomepage : Pages, IComponentContentFull
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sectionHomepage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SectionHomepage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionHomepage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Events Root: Where event pages live on the site.
		///</summary>
		[ImplementPropertyType("eventsRoot")]
		public IPublishedContent EventsRoot
		{
			get { return this.GetPropertyValue<IPublishedContent>("eventsRoot"); }
		}

		///<summary>
		/// Highlights: highlighted pages
		///</summary>
		[ImplementPropertyType("highlights")]
		public Umbraco.Web.Models.RelatedLinks Highlights
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.RelatedLinks>("highlights"); }
		}

		///<summary>
		/// Highlights Title: Title of the highlights box
		///</summary>
		[ImplementPropertyType("highlightsTitle")]
		public object HighlightsTitle
		{
			get { return this.GetPropertyValue("highlightsTitle"); }
		}

		///<summary>
		/// News Root: Where news pages live in the site
		///</summary>
		[ImplementPropertyType("newsRoot")]
		public IPublishedContent NewsRoot
		{
			get { return this.GetPropertyValue<IPublishedContent>("newsRoot"); }
		}

		///<summary>
		/// Section Name: Appears in the site navigation
		///</summary>
		[ImplementPropertyType("sectionName")]
		public object SectionName
		{
			get { return this.GetPropertyValue("sectionName"); }
		}

		///<summary>
		/// Section Stylesheet: stylesheets applied to all pages in this section
		///</summary>
		[ImplementPropertyType("sectionStylesheet")]
		public string SectionStylesheet
		{
			get { return this.GetPropertyValue<string>("sectionStylesheet"); }
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}
	}

	/// <summary>Homepage</summary>
	[PublishedContentModel("homepage")]
	public partial class Homepage : SectionHomepage
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "homepage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Homepage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Homepage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Footer Links
		///</summary>
		[ImplementPropertyType("footerLinks")]
		public Umbraco.Web.Models.RelatedLinks FooterLinks
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.RelatedLinks>("footerLinks"); }
		}

		///<summary>
		/// Site Name: Name for the site
		///</summary>
		[ImplementPropertyType("siteName")]
		public object SiteName
		{
			get { return this.GetPropertyValue("siteName"); }
		}

		///<summary>
		/// Tag Manager Code: ID for Google Tag Manager
		///</summary>
		[ImplementPropertyType("tagCode")]
		public string TagCode
		{
			get { return this.GetPropertyValue<string>("tagCode"); }
		}
	}

	/// <summary>Service Alert</summary>
	[PublishedContentModel("serviceAlert")]
	public partial class ServiceAlert : Components, IContentSmall
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "serviceAlert";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ServiceAlert(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ServiceAlert, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alert Type
		///</summary>
		[ImplementPropertyType("alertType")]
		public string AlertType
		{
			get { return this.GetPropertyValue<string>("alertType"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText
		{
			get { return Umbraco.Web.PublishedContentModels.ContentSmall.GetBodyText(this); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ContentSmall.GetTitle(this); }
		}
	}

	/// <summary>Settings Folder</summary>
	[PublishedContentModel("settingsFolder")]
	public partial class SettingsFolder : Configuration
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "settingsFolder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SettingsFolder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SettingsFolder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>System Pages</summary>
	[PublishedContentModel("systemPages")]
	public partial class SystemPages : Pages
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "systemPages";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SystemPages(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SystemPages, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>AtoZ</summary>
	[PublishedContentModel("atoZ")]
	public partial class AtoZ : SystemPages, IComponentContentFull
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "atoZ";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public AtoZ(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AtoZ, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}
	}

	/// <summary>Search</summary>
	[PublishedContentModel("search")]
	public partial class Search : SystemPages, IComponentContentFull
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "search";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Search(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Search, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}
	}

	/// <summary>Sitemap</summary>
	[PublishedContentModel("sitemap")]
	public partial class Sitemap : SystemPages, IComponentContentFull
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sitemap";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Sitemap(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Sitemap, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}
	}

	/// <summary>Venue</summary>
	[PublishedContentModel("venue")]
	public partial class Venue : Pages, IComponentContentFull, ILocationInfo, IRelatedItems
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "venue";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Venue(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Venue, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Content for the page
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetContent(this); }
		}

		///<summary>
		/// Title: Title of the page
		///</summary>
		[ImplementPropertyType("title")]
		public object Title
		{
			get { return Umbraco.Web.PublishedContentModels.ComponentContentFull.GetTitle(this); }
		}

		///<summary>
		/// Location
		///</summary>
		[ImplementPropertyType("location")]
		public AngularGoogleMaps.Model Location
		{
			get { return Umbraco.Web.PublishedContentModels.LocationInfo.GetLocation(this); }
		}

		///<summary>
		/// Related Items
		///</summary>
		[ImplementPropertyType("relatedItems")]
		public Umbraco.Web.Models.RelatedLinks RelatedItems
		{
			get { return Umbraco.Web.PublishedContentModels.RelatedItems.GetRelatedItems(this); }
		}
	}

	/// <summary>User</summary>
	[PublishedContentModel("user")]
	public partial class User : Home
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "user";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public User(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<User, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Password
		///</summary>
		[ImplementPropertyType("password")]
		public string Password
		{
			get { return this.GetPropertyValue<string>("password"); }
		}

		///<summary>
		/// UserName
		///</summary>
		[ImplementPropertyType("userName")]
		public string UserName
		{
			get { return this.GetPropertyValue<string>("userName"); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public string UmbracoFile
		{
			get { return this.GetPropertyValue<string>("umbracoFile"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}
